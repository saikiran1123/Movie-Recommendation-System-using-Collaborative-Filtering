#Installing Modules

import pandas as pd
import numpy as np
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt
movies = pd.read_csv("movies.csv")
ratings = pd.read_csv("ratings.csv")
movies.head()
ratings.head()
final_dataset = ratings.pivot(index='movieId',columns='userId',values='rating')
final_dataset.head()
final_dataset.fillna(0,inplace=True)
final_dataset.head()

#Removing Noise from Data
no_user_voted = ratings.groupby('movieId')['rating'].agg('count')
no_movies_voted = ratings.groupby('userId')['rating'].agg('count')
f,ax = plt.subplots(1,1,figsize=(16,4))
plt.scatter(no_user_voted.index,no_user_voted,color='mediumseagreen')
plt.axhline(y=10,color='r')
plt.xlabel('MovieId')
plt.ylabel('No. of users voted')
plt.show()
final_dataset = final_dataset.loc[no_user_voted[no_user_voted > 10].index,:]
f,ax = plt.subplots(1,1,figsize=(16,4))
plt.scatter(no_movies_voted.index,no_movies_voted,color='mediumseagreen')
plt.axhline(y=50,color='r')
plt.xlabel('UserId')
plt.ylabel('No. of votes by user')
plt.show()
final_dataset=final_dataset.loc[:,no_movies_voted[no_movies_voted > 50].index]

#Removing Sparcity
sample = np.array([[0,0,3,0,0],[4,0,0,0,2],[0,0,0,0,1]])
sparsity = 1.0 - ( np.count_nonzero(sample) / float(sample.size) )
print(sparsity)
csr_sample = csr_matrix(sample)
print(csr_sample)
csr_data = csr_matrix(final_dataset.values)
final_dataset.reset_index(inplace=True)
knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)
knn.fit(csr_data)

#Recommendation_function
def get_movie_recommendation(movie_name,yr):
 yr=int(yr)
 n_movies_to_reccomend = 5
 movie_list = movies[movies['title'].str.contains(movie_name)]
 if len(movie_list):
 movie_idx= movie_list.iloc[0]['movieId']
 movie_idx = final_dataset[final_dataset['movieId'] == movie_idx].index[0]
 distances , indices = 
knn.kneighbors(csr_data[movie_idx],n_neighbors=n_movies_to_reccomend+1)
 rec_movie_indices = 
sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]
 recommend_frame = []
 for val in rec_movie_indices:
 movie_idx = final_dataset.iloc[val[0]]['movieId']
 idx = movies[movies['movieId'] == movie_idx].index
 if(yr<=int(movies.iloc[idx]['year'].values[0])):
 
recommend_frame.append({'Title':movies.iloc[idx]['title'].values[0],'Year':movies.iloc[idx]['year'].value
s[0],'Genres':movies.iloc[idx]['genres'].values[0]})
 df = pd.DataFrame(recommend_frame,index=range(1,n_movies_to_reccomend+1))
 print(df)
 else:
 print("No movies found. Please check your input")
#Rating a movie
def rate_a_movie(movie_name,rating,user_id):
 movie_list = movies[movies['title'].str.contains(movie_name)]
 rating=int(rating)
 user_id=int(user_id)
 if len(movie_list):
 movie_idx = movie_list.iloc[0]['movieId']
 df = pd.DataFrame({'userId': [user_id],
 'movieId': [movie_idx],
 'rating': [rating]})
 df.to_csv('ratings.csv', mode='a', index=False, header=False)
 print("Data appended Succesfully")
 else:
 print("No movies found. Please check your input")